classdef Environment < handle
    properties
        NX           % Size in X direction
        NY           % Size in Y direction
        NZ           % Height of the environment (Z direction)
        texture      % Texture image data for walls and ceiling
        sand         % Sand texture image data for the floor
        welderModel  % Property to store the welder model
        columnModel  % Property to store the column model
        steelTileModel % Property to store the steel tile model
        fishModel1   % Property to store the fish1 model
        fishModel2   % Property to store the fish2 model
        coralModel1  % Property to store the coral1 model
        coralModel2  % Property to store the coral2 model
    end
    
    methods
        % Constructor for the Environment class
        function self = Environment(NX, NY, NZ)
            if nargin < 1
                NX = 5; % Default size
            end
            if nargin < 2
                NY = NX; % Make the environment square if NY not provided
            end
            if nargin < 3
                NZ = 3;  % Default height
            end
            self.NX = NX;
            self.NY = NY;
            self.NZ = NZ;
            
            % Load the texture images
            self.texture = imread('Data/water.png');  % For walls and ceiling
            self.sand = imread('Data/sand.png');      % For floor

            % Initialize models as empty
            self.welderModel = [];  
            self.columnModel = [];  
            self.steelTileModel = [];  
            self.fishModel1 = [];  
            self.fishModel2 = [];  
            self.coralModel1 = [];  
            self.coralModel2 = [];  

            % Create a new figure and plot environment when instantiated
            figure;
            hAxes = gca;  % Get current axes
            self.plotEnvironment(hAxes);  % Plot the environment
            
            % Adjust the camera view to see all walls
            view(3);      % Set 3D view
            axis equal;   % Maintain aspect ratio
            
            % Load and plot other elements
            self.loadAndPlotColumn(hAxes);      % Column
            self.loadAndPlotFish(hAxes);        % Fish
            self.loadAndPlotCoral(hAxes);       % Coral
            self.loadAndPlotFences(hAxes);      % Fences
        end
        
        % Method to plot the environment (floor and walls)
        function plotEnvironment(self, hAxes)
            if nargin < 2
                hAxes = gca;
            end
            
            % Plot the floor
            x = linspace(-self.NX/2, self.NX/2, 2);
            y = linspace(-self.NY/2, self.NY/2, 2);
            [X, Y] = meshgrid(x, y);
            Z = zeros(size(X)); % Floor at Z = 0
            
            % Plot the floor with the sand texture
            surface('XData', X, 'YData', Y, 'ZData', Z, ...
                'CData', self.sand, 'FaceColor', 'texturemap', ...
                'EdgeColor', 'none', 'Parent', hAxes);

            % Plot selected walls
            [Y_wall, Z_wall] = meshgrid(linspace(-self.NY/2, self.NY/2, 2), linspace(0, self.NZ, 2));
            X_wall = self.NX/2 * ones(size(Y_wall));
            surface('XData', X_wall, 'YData', Y_wall, 'ZData', Z_wall, ...
                'CData', self.texture, 'FaceColor', 'texturemap', ...
                'EdgeColor', 'none', 'Parent', hAxes);

            [X_wall, Z_wall] = meshgrid(linspace(-self.NX/2, self.NX/2, 2), linspace(0, self.NZ, 2));
            Y_wall = self.NY/2 * ones(size(X_wall));
            surface('XData', X_wall, 'YData', Y_wall, 'ZData', Z_wall, ...
                'CData', self.texture, 'FaceColor', 'texturemap', ...
                'EdgeColor', 'none', 'Parent', hAxes);

            % Set axes limits and labels
            xlim(hAxes, [-self.NX/2, self.NX/2]);
            ylim(hAxes, [-self.NY/2, self.NY/2]);
            zlim(hAxes, [0, self.NZ]);  % Set Z-axis limits from 0 to NZ
            xlabel(hAxes, 'X (m)');
            ylabel(hAxes, 'Y (m)');
            zlabel(hAxes, 'Z (m)');
            
            % Enable grid and hold the plot
            grid(hAxes, 'on');
            hold on;
        end

        % Method to load and plot fences
        function loadAndPlotFences(~, hAxes)
            % Fence 1 (along the x-axis, positive side)
            h_1 = PlaceObject('objects/fenceFinal.ply', [2, 0, -0.5]); 
            verts = [get(h_1, 'Vertices'), ones(size(get(h_1, 'Vertices'), 1), 1)] * trotz(pi/2); % Rotate fence 90 degrees
            verts(:, 1) = verts(:, 1) * 8; % Adjust scaling
            set(h_1, 'Vertices', verts(:, 1:3));
            
            % Fence 2 (along the x-axis, negative side)
            h_2 = PlaceObject('objects/fenceFinal.ply', [-2, 0, -0.5]);
            verts = [get(h_2, 'Vertices'), ones(size(get(h_2, 'Vertices'), 1), 1)] * trotz(pi/2);   
            verts(:, 1) = verts(:, 1) * 8; 
            set(h_2, 'Vertices', verts(:, 1:3));
            
            % Fence 3 (along the y-axis, positive side)
            h_3 = PlaceObject('objects/fenceFinal.ply', [0, 0, -0.5]);
            verts = [get(h_3, 'Vertices'), ones(size(get(h_3, 'Vertices'), 1), 1)];
            verts(:, 2) = verts(:, 2) * 8; % Adjust scaling
            verts(:, 1) = verts(:, 1) + 2; % Align with concrete corner
            set(h_3, 'Vertices', verts(:, 1:3));
            
            % Fence 4 (along the y-axis, negative side)
            h_4 = PlaceObject('objects/fenceFinal.ply', [0, 0, -0.5]);
            verts = [get(h_4, 'Vertices'), ones(size(get(h_4, 'Vertices'), 1), 1)];
            verts(:, 2) = verts(:, 2) * 8; % Adjust scaling
            verts(:, 1) = verts(:, 1) - 2; % Align with concrete corner
            set(h_4, 'Vertices', verts(:, 1:3));
        end

        % (Other methods like loadAndPlotColumn, loadAndPlotFish, etc., go here)
    end
end
